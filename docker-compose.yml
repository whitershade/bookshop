version: "3.2"
services:
  backend1:
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start
    depends_on:
      - mysql-development
    restart: always
    volumes:
      - .:/src
      - /src/node_modules
    networks:
      - app-network

  backend2:
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start
    depends_on:
      - mysql-development
    restart: always
    volumes:
      - .:/src
      - /src/node_modules
    networks:
      - app-network

  backend3:
    tty: true
    build:
      context: .
      dockerfile: Dockerfile
    command: npm run start
    depends_on:
      - mysql-development
    restart: always
    volumes:
      - .:/src
      - /src/node_modules
    networks:
      - app-network

  mysql-development:
    image: mysql:5
    container_name: mysql-development
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: books_user
      MYSQL_DATABASE: bookshop
      MYSQL_PASSWORD: password
      MYSQL_HOST: mysql-development
    ports:
      - "3306:3306"
    networks:
      - app-network

  mysql-test:
    image: mysql:5
    container_name: mysql-test
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_USER: books_user
      MYSQL_DATABASE: bookshop
      MYSQL_PASSWORD: password
      MYSQL_HOST: mysql-test
    ports:
      - "3307:3306"
    networks:
      - app-network

  dev-migrations:
    build:
      context: .
    command: bash -c "cd ./build && ls && chmod +x ./run_migrations.sh && ./run_migrations.sh dev"
    links:
      - mysql-development
    depends_on:
      - mysql-development
    networks:
      - app-network

  loadbalancer:
    build: ./load-balancer
    tty: true
    links:
      - backend1
      - backend2
      - backend3
    ports:
      - '8081:8080'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

